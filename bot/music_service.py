import os
import spotipy
import requests
import yt_dlp
from spotipy.oauth2 import SpotifyClientCredentials
from loguru import logger

class MusicService:
    def __init__(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –º—É–∑—ã–∫–∏ —á–µ—Ä–µ–∑ Spotify API.
        –¢—Ä–µ–±—É–µ—Ç SPOTIFY_CLIENT_ID –∏ SPOTIFY_CLIENT_SECRET –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.
        """
        try:
            client_id = os.getenv('SPOTIFY_CLIENT_ID')
            client_secret = os.getenv('SPOTIFY_CLIENT_SECRET')
            
            if not client_id or not client_secret:
                logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω—ã —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Spotify API –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
                raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Spotify API")
            
            client_credentials_manager = SpotifyClientCredentials(
                client_id=client_id, 
                client_secret=client_secret
            )
            self.spotify = spotipy.Spotify(client_credentials_manager=client_credentials_manager)
            logger.info("Spotify API –∫–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Spotify API: {e}")
            raise
    
    async def search_track(self, query, limit=5):
        """
        –ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É.
        
        Args:
            query (str): –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            limit (int): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            
        Returns:
            list: –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        """
        try:
            logger.info(f"–ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–∞: '{query}', –ª–∏–º–∏—Ç: {limit}")
            results = self.spotify.search(q=query, limit=limit, type='track')
            
            tracks = []
            for item in results['tracks']['items']:
                track_info = {
                    'name': item['name'],
                    'artist': ', '.join([artist['name'] for artist in item['artists']]),
                    'album': item['album']['name'],
                    'release_date': item['album']['release_date'],
                    'duration_ms': item['duration_ms'],
                    'popularity': item['popularity'],
                    'preview_url': item['preview_url'],
                    'external_url': item['external_urls']['spotify'],
                    'image_url': item['album']['images'][0]['url'] if item['album']['images'] else None,
                    'id': item['id']
                }
                tracks.append(track_info)
            
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(tracks)} —Ç—Ä–µ–∫–æ–≤")
            return tracks
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç—Ä–µ–∫–∞: {e}")
            return []
    
    async def get_track_recommendations(self, track_id, limit=5):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–µ–∫–∞.
        
        Args:
            track_id (str): ID —Ç—Ä–µ–∫–∞ –≤ Spotify
            limit (int): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            
        Returns:
            list: –°–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤
        """
        try:
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è —Ç—Ä–µ–∫–∞ ID: {track_id}")
            recommendations = self.spotify.recommendations(seed_tracks=[track_id], limit=limit)
            
            tracks = []
            for item in recommendations['tracks']:
                track_info = {
                    'name': item['name'],
                    'artist': ', '.join([artist['name'] for artist in item['artists']]),
                    'album': item['album']['name'],
                    'preview_url': item['preview_url'],
                    'external_url': item['external_urls']['spotify'],
                    'image_url': item['album']['images'][0]['url'] if item['album']['images'] else None
                }
                tracks.append(track_info)
            
            return tracks
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
            return []
    
    def format_track_info(self, track):
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–µ–∫–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.
        
        Args:
            track (dict): –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–µ–∫–µ
            
        Returns:
            str: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        duration_sec = track['duration_ms'] // 1000
        minutes = duration_sec // 60
        seconds = duration_sec % 60
        
        text = (
            f"üéµ <b>{track['name']}</b>\n"
            f"üé§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {track['artist']}\n"
            f"üíø –ê–ª—å–±–æ–º: {track['album']}\n"
            f"üìÖ –î–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞: {track['release_date']}\n"
            f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {minutes}:{seconds:02d}\n"
            f"üîó <a href='{track['external_url']}'>–°–ª—É—à–∞—Ç—å –Ω–∞ Spotify</a>"
        )
        
        return text
        
    async def download_full_song(self, track):
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª–Ω–æ–π –ø–µ—Å–Ω–∏ —Å YouTube.
        
        Args:
            track (dict): –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–µ–∫–µ
            
        Returns:
            str: –ü—É—Ç—å –∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –∏–ª–∏ None
        """
        try:
            search_query = f"{track['name']} {track['artist']}"
            logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª–Ω–æ–π –ø–µ—Å–Ω–∏: '{search_query}'")
            
            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            downloads_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'downloads')
            os.makedirs(downloads_dir, exist_ok=True)
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            safe_filename = f"{track['artist']} - {track['name']}".replace('/', '_').replace('\\', '_')
            safe_filename = ''.join(c for c in safe_filename if c.isalnum() or c in ' -_.')
            output_file = os.path.join(downloads_dir, f"{safe_filename}.mp3")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª —É–∂–µ
            if os.path.exists(output_file):
                logger.info(f"–§–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {output_file}")
                return output_file
            
            # –û–ø—Ü–∏–∏ –¥–ª—è yt-dlp
            ydl_opts = {
                'format': 'bestaudio/best',
                'outtmpl': output_file,
                'noplaylist': True,
                'quiet': True,
                'no_warnings': True,
                'ignoreerrors': True,
                'postprocessors': [{
                    'key': 'FFmpegExtractAudio',
                    'preferredcodec': 'mp3',
                    'preferredquality': '192',
                }],
            }
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Å–Ω–∏
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                try:
                    info = ydl.extract_info(f"ytsearch:{search_query}", download=True)
                    if info and 'entries' in info and info['entries']:
                        logger.info(f"–ü–µ—Å–Ω—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {output_file}")
                        return output_file
                    else:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–µ—Å–Ω—é: {search_query}")
                        return None
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å YouTube: {e}")
                    return None
            
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª–Ω–æ–π –ø–µ—Å–Ω–∏: {e}")
            return None 