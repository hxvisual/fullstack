import os
import spotipy
import requests
import yt_dlp
import tempfile
import json
import platform
import subprocess
from pathlib import Path
from spotipy.oauth2 import SpotifyClientCredentials
from loguru import logger

class MusicService:
    def __init__(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –º—É–∑—ã–∫–∏ —á–µ—Ä–µ–∑ Spotify API.
        –¢—Ä–µ–±—É–µ—Ç SPOTIFY_CLIENT_ID –∏ SPOTIFY_CLIENT_SECRET –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.
        """
        try:
            client_id = os.getenv('SPOTIFY_CLIENT_ID')
            client_secret = os.getenv('SPOTIFY_CLIENT_SECRET')
            
            if not client_id or not client_secret:
                logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω—ã —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Spotify API –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
                raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Spotify API")
            
            client_credentials_manager = SpotifyClientCredentials(
                client_id=client_id, 
                client_secret=client_secret
            )
            self.spotify = spotipy.Spotify(client_credentials_manager=client_credentials_manager)
            logger.info("Spotify API –∫–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫—É–∫–∏ –¥–ª—è YouTube
            self.cookies_file = os.getenv('YOUTUBE_COOKIES_FILE')
            
            if self.cookies_file and os.path.exists(self.cookies_file):
                logger.info(f"–§–∞–π–ª —Å –∫—É–∫–∏ –¥–ª—è YouTube –Ω–∞–π–¥–µ–Ω: {self.cookies_file}")
            else:
                logger.info("–§–∞–π–ª —Å –∫—É–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            raise
    
    async def search_track(self, query, limit=5):
        """
        –ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É.
        
        Args:
            query (str): –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            limit (int): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            
        Returns:
            list: –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        """
        try:
            logger.info(f"–ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–∞: '{query}', –ª–∏–º–∏—Ç: {limit}")
            results = self.spotify.search(q=query, limit=limit, type='track')
            
            tracks = []
            for item in results['tracks']['items']:
                track_info = {
                    'name': item['name'],
                    'artist': ', '.join([artist['name'] for artist in item['artists']]),
                    'album': item['album']['name'],
                    'release_date': item['album']['release_date'],
                    'duration_ms': item['duration_ms'],
                    'popularity': item['popularity'],
                    'preview_url': item['preview_url'],
                    'external_url': item['external_urls']['spotify'],
                    'image_url': item['album']['images'][0]['url'] if item['album']['images'] else None,
                    'id': item['id']
                }
                tracks.append(track_info)
            
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(tracks)} —Ç—Ä–µ–∫–æ–≤")
            return tracks
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç—Ä–µ–∫–∞: {e}")
            return []
    
    async def get_track_recommendations(self, track_id, limit=5):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–µ–∫–∞.
        
        Args:
            track_id (str): ID —Ç—Ä–µ–∫–∞ –≤ Spotify
            limit (int): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            
        Returns:
            list: –°–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤
        """
        try:
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è —Ç—Ä–µ–∫–∞ ID: {track_id}")
            recommendations = self.spotify.recommendations(seed_tracks=[track_id], limit=limit)
            
            tracks = []
            for item in recommendations['tracks']:
                track_info = {
                    'name': item['name'],
                    'artist': ', '.join([artist['name'] for artist in item['artists']]),
                    'album': item['album']['name'],
                    'preview_url': item['preview_url'],
                    'external_url': item['external_urls']['spotify'],
                    'image_url': item['album']['images'][0]['url'] if item['album']['images'] else None
                }
                tracks.append(track_info)
            
            return tracks
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
            return []
    
    def format_track_info(self, track):
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–µ–∫–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.
        
        Args:
            track (dict): –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–µ–∫–µ
            
        Returns:
            str: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        duration_sec = track['duration_ms'] // 1000
        minutes = duration_sec // 60
        seconds = duration_sec % 60
        
        text = (
            f"üéµ <b>{track['name']}</b>\n"
            f"üé§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {track['artist']}\n"
            f"üíø –ê–ª—å–±–æ–º: {track['album']}\n"
            f"üìÖ –î–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞: {track['release_date']}\n"
            f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {minutes}:{seconds:02d}\n"
            f"üîó <a href='{track['external_url']}'>–°–ª—É—à–∞—Ç—å –Ω–∞ Spotify</a>"
        )
        
        return text 
        
    async def download_full_song(self, track):
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª–Ω–æ–π –ø–µ—Å–Ω–∏ —Å YouTube.
        
        Args:
            track (dict): –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–µ–∫–µ
            
        Returns:
            str: –ü—É—Ç—å –∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –∏–ª–∏ None
        """
        try:
            search_query = f"{track['name']} {track['artist']}"
            logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª–Ω–æ–π –ø–µ—Å–Ω–∏: '{search_query}'")
            
            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            downloads_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'downloads')
            os.makedirs(downloads_dir, exist_ok=True)
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            safe_filename = f"{track['artist']} - {track['name']}".replace('/', '_').replace('\\', '_')
            safe_filename = ''.join(c for c in safe_filename if c.isalnum() or c in ' -_.')
            output_file = os.path.join(downloads_dir, f"{safe_filename}.mp3")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª —É–∂–µ
            if os.path.exists(output_file):
                logger.info(f"–§–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {output_file}")
                return output_file
            
            # –û–±—â–∏–µ –æ–ø—Ü–∏–∏ –¥–ª—è yt-dlp
            ydl_opts = {
                'format': 'bestaudio/best',
                'outtmpl': output_file,
                'noplaylist': True,
                'quiet': True,
                'no_warnings': True,
                'ignoreerrors': True,
                'postprocessors': [{
                    'key': 'FFmpegExtractAudio',
                    'preferredcodec': 'mp3',
                    'preferredquality': '192',
                }],
                # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
                'geo_bypass': True,
                'geo_bypass_country': 'US',
                'age_limit': 25,  # –£—Å—Ç–∞–Ω–æ–≤–∏–º —Å—Ä–∞–∑—É –≤—ã—Å–æ–∫–∏–π –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –ª–∏–º–∏—Ç
                'nocheckcertificate': True,
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∫–ª—é—á–∞–µ–º –ø–æ–∏—Å–∫, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è URL
                'default_search': 'ytsearch',
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫—É–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ —É–∫–∞–∑–∞–Ω—ã
            if self.cookies_file and os.path.exists(self.cookies_file):
                ydl_opts['cookiefile'] = self.cookies_file
                logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–π–ª —Å –∫—É–∫–∏: {self.cookies_file}")
            
            # –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
            download_success = await self._try_download(search_query, ydl_opts)
            
            # –ï—Å–ª–∏ –ø–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            if not download_success:
                logger.warning("–ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ —É–¥–∞–ª–∞—Å—å. –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã...")

                # –ü–æ–ø—ã—Ç–∫–∞ 5: –ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏
                if not download_success:
                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–ª–æ–∂–Ω—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                    minimal_opts = {
                        'format': 'bestaudio/best',
                        'outtmpl': output_file,
                        'noplaylist': True,
                        'quiet': True,
                        'ignoreerrors': True,
                        'nocheckcertificate': True,
                        'default_search': 'ytsearch',
                        'postprocessors': [{
                            'key': 'FFmpegExtractAudio',
                            'preferredcodec': 'mp3',
                            'preferredquality': '192',
                        }],
                    }
                    
                    download_success = await self._try_download(f"{search_query} lyrics", minimal_opts)
            
            if download_success and os.path.exists(output_file):
                logger.info(f"–ü–µ—Å–Ω—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {output_file}")
                return output_file
            else:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Å–Ω—é –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫: {search_query}")
                return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª–Ω–æ–π –ø–µ—Å–Ω–∏: {e}")
            return None
            
    async def _try_download(self, search_query, ydl_opts):
        """
        –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–∫–∞ —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.
        
        Args:
            search_query (str): –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            ydl_opts (dict): –û–ø—Ü–∏–∏ –¥–ª—è yt-dlp
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏
        """
        try:
            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ search_query –Ω–µ –ø—É—Å—Ç–æ–π
            if not search_query or not search_query.strip():
                logger.error("–ü—É—Å—Ç–æ–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")
                return False
                
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å URL
                is_url = search_query.startswith(('http://', 'https://', 'www.'))
                
                if is_url:
                    # –ï—Å–ª–∏ —ç—Ç–æ URL, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–ø—Ä—è–º—É—é
                    info = ydl.extract_info(search_query, download=True)
                else:
                    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ URL, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –ø—Ä–µ—Ñ–∏–∫—Å
                    search_prefix = ydl_opts.get('default_search', 'ytsearch')
                    full_query = f"{search_prefix}:{search_query}"
                    info = ydl.extract_info(full_query, download=True)
                
                if info:
                    if 'entries' in info and info['entries']:
                        if len(info['entries']) > 0 and info['entries'][0]:
                            return True
                    elif info.get('id'):
                        # –ü—Ä—è–º–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–µ–∑ —Å–ø–∏—Å–∫–∞
                        return True
                
                return False
                
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")
            return False 