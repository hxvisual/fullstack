import os
import asyncio
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, StateFilter
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from loguru import logger

from music_service import MusicService
from keyboards import get_main_keyboard, get_search_results_keyboard, get_track_inline_keyboard

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger.add("bot.log", rotation="10 MB", level="INFO")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    logger.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env")
    exit(1)

# –ù–∞–∑–≤–∞–Ω–∏–µ –±–æ—Ç–∞ (–±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è –∫ –Ω–∞–∑–≤–∞–Ω–∏—é –ø–µ—Å–Ω–∏)
BOT_NAME = "@hxmusic_robot"

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –ø–æ–∏—Å–∫–∞ –º—É–∑—ã–∫–∏
try:
    music_service = MusicService()
except Exception as e:
    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ä–≤–∏—Å –ø–æ–∏—Å–∫–∞ –º—É–∑—ã–∫–∏: {e}")
    music_service = None

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ 
search_results = {}
# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞
search_messages = {}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def cmd_start(message: Message):
    start_text = f"""
<b>üéµ –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üéµ</b>

–Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π <b>–º—É–∑—ã–∫–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç</b>. –ë—É–¥—É –ø–æ–º–æ–≥–∞—Ç—å —Ç–µ–±–µ –Ω–∞—Ö–æ–¥–∏—Ç—å –ª—é–±–∏–º—É—é –º—É–∑—ã–∫—É –≤ —Å—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–µ–∫—É–Ω–¥—ã!

<b>üîç –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>
‚Ä¢ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
‚Ä¢ –í—ã–±–µ—Ä–∏ —Ç—Ä–µ–∫ –∏–∑ —Å–ø–∏—Å–∫–∞
‚Ä¢ –ü–æ–ª—É—á–∏ –ø–æ–ª–Ω—É—é –≤–µ—Ä—Å–∏—é –ø–µ—Å–Ω–∏ –ø—Ä—è–º–æ –≤ —á–∞—Ç–µ

<b>‚ö°Ô∏è –ë—ã—Å—Ç—Ä–æ –∏ –ª–µ–≥–∫–æ, –±–µ–∑ —Å—Å—ã–ª–æ–∫ –∏ —Ä–µ–∫–ª–∞–º—ã!</b>
"""
    await message.answer(
        start_text,
        parse_mode="HTML",
        reply_markup=get_main_keyboard()
    )
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

@dp.message(Command("help"))
async def cmd_help(message: Message):
    help_text = """
<b>üìö –ü–û–ú–û–©–¨ –ò –ö–û–ú–ê–ù–î–´ üìö</b>

<b>üéØ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ /start - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
‚Ä¢ /help - –≠—Ç–æ –º–µ–Ω—é –ø–æ–º–æ—â–∏

<b>üéß –ö–∞–∫ –Ω–∞–π—Ç–∏ –º—É–∑—ã–∫—É:</b>
1. –ù–∞–ø–∏—à–∏ <i>–Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏</i> –∏–ª–∏ <i>–∏–º—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è</i>
2. –í—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–∫ –∏–∑ —Å–ø–∏—Å–∫–∞
3. –î–æ–∂–¥–∏—Å—å –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Å—è –º—É–∑—ã–∫–æ–π!

<b>üí° –°–æ–≤–µ—Ç—ã:</b>
‚Ä¢ –î–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —É–∫–∞–∑—ã–≤–∞–π –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è, –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞
‚Ä¢ –ú–æ–∂–Ω–æ –∏—Å–∫–∞—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ
‚Ä¢ –ß–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ–µ –∑–∞–ø—Ä–æ—Å, —Ç–µ–º —Ç–æ—á–Ω–µ–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç

<b>üîä –ö–∞—á–µ—Å—Ç–≤–æ:</b> –í—Å–µ —Ç—Ä–µ–∫–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –≤ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ–º –∫–∞—á–µ—Å—Ç–≤–µ.

<b>üåê –ò—Å—Ç–æ—á–Ω–∏–∫–∏:</b> –ü–æ–∏—Å–∫ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ Spotify API.

<b>üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b> –ï—Å–ª–∏ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –ø–∏—à–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @crypthx
"""
    await message.answer(help_text, parse_mode="HTML", reply_markup=get_main_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
@dp.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def text_help(message: Message):
    await cmd_help(message)

@dp.message(F.text == "üëã –û –±–æ—Ç–µ")
async def text_about(message: Message):
    about_text = """
<b>üéß HX Music Bot üéß</b>

<b>üöÄ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –º–∏–ª–ª–∏–æ–Ω–æ–≤ —Ç—Ä–µ–∫–æ–≤
‚Ä¢ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø–æ–ª–Ω—ã—Ö –≤–µ—Ä—Å–∏–π –ø–µ—Å–µ–Ω

<b>üìà –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</b>
‚Ä¢ –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
‚Ä¢ –ò–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ –ø–æ–Ω—è—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
‚Ä¢ –ù–∏–∫–∞–∫–æ–π —Ä–µ–∫–ª–∞–º—ã –∏ –æ—Ç–≤–ª–µ–∫–∞—é—â–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤
‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ —É–ª—É—á—à–µ–Ω–∏—è

<b>üîç –ù–∞—á–Ω–∏ –ø–æ–∏—Å–∫ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!</b>
–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª—é–±–∏–º–æ–π –ø–µ—Å–Ω–∏.
"""
    await message.answer(about_text, parse_mode="HTML", reply_markup=get_main_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
@dp.callback_query(F.data.startswith("track:"))
async def process_track_selection(callback: CallbackQuery):
    user_id = callback.from_user.id
    track_idx = int(callback.data.split(":")[1])
    
    if user_id not in search_results or not search_results[user_id]:
        await callback.answer("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫.", show_alert=True)
        return
    
    if track_idx >= len(search_results[user_id]):
        await callback.answer("–¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
        return
    
    track = search_results[user_id][track_idx]
    
    # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–∞—á–∞–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
    await callback.answer("–ó–∞–≥—Ä—É–∂–∞—é –ø–µ—Å–Ω—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
    status_msg = await callback.message.answer(
        f"<b>‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Ç—Ä–µ–∫:</b>\nüéµ <b>{track['name']}</b>\nüé§ <b>{track['artist']}</b>\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...",
        parse_mode="HTML"
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
    await bot.send_chat_action(chat_id=callback.message.chat.id, action="upload_document")
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Å–Ω—é
        file_path = await music_service.download_full_song(track)
        
        if file_path and os.path.exists(file_path):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ—Ñ–∞–π–ª –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            audio_file = FSInputFile(file_path)
            await callback.message.answer_audio(
                audio=audio_file,
                performer=track['artist'],
                title=f"{track['name']} | {BOT_NAME}",
                caption=f"üéµ <b>{track['name']}</b> - {track['artist']} | {BOT_NAME}",
                parse_mode="HTML"
            )
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
            await status_msg.delete()
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞
            if user_id in search_messages and search_messages[user_id]:
                try:
                    await callback.message.delete()
                    search_messages[user_id] = None
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞: {e}")
        else:
            # –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            await status_msg.edit_text(
                f"‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç—Ä–µ–∫</b>\n\nüéµ <b>{track['name']}</b>\nüé§ <b>{track['artist']}</b>\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ç—Ä–µ–∫ –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.",
                parse_mode="HTML"
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ/–æ—Ç–ø—Ä–∞–≤–∫–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞: {e}")
        await status_msg.edit_text(
            f"‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä–µ–∫–∞</b>\n\nüéµ <b>{track['name']}</b>\nüé§ <b>{track['artist']}</b>\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ç—Ä–µ–∫.",
            parse_mode="HTML"
        )

@dp.callback_query(F.data.startswith("page:"))
async def process_pagination(callback: CallbackQuery):
    user_id = callback.from_user.id
    page = int(callback.data.split(":")[1])
    
    if user_id not in search_results or not search_results[user_id]:
        await callback.answer("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫.", show_alert=True)
        return
    
    tracks = search_results[user_id]
    keyboard = get_search_results_keyboard(tracks, page)
    
    await callback.message.edit_text(
        f"<b>üéµ –ù–∞–π–¥–µ–Ω–æ {len(tracks)} —Ç—Ä–µ–∫–æ–≤</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–∫ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è üëá",
        parse_mode="HTML",
        reply_markup=keyboard
    )
    
    await callback.answer()

@dp.callback_query(F.data == "new_search")
async def process_new_search(callback: CallbackQuery):
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –∏–ª–∏ –∏–º—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞:",
        reply_markup=get_main_keyboard()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )
    await callback.answer()

# –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message(~F.text.startswith('/'))
async def echo_message(message: Message):
    # –õ—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–∏—Å–∫
    await perform_search(message, message.text)

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def perform_search(message: Message, query: str):
    if not music_service:
        await message.answer(
            "‚ùå <b>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ—Ä–≤–∏—Å –ø–æ–∏—Å–∫–∞ –º—É–∑—ã–∫–∏ —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.</b>\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode="HTML",
            reply_markup=get_main_keyboard()
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
    await bot.send_chat_action(chat_id=message.chat.id, action="typing")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
    tracks = await music_service.search_track(query, limit=15)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = message.from_user.id
    search_results[user_id] = tracks
    
    if not tracks:
        await message.answer(
            f"‚ùå <b>–ü–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.</b>\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ.",
            parse_mode="HTML",
            reply_markup=get_main_keyboard()
        )
        return
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    keyboard = get_search_results_keyboard(tracks, page=0)
    search_msg = await message.answer(
        f"<b>üéµ –ù–∞–π–¥–µ–Ω–æ {len(tracks)} —Ç—Ä–µ–∫–æ–≤</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–∫ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è üëá",
        parse_mode="HTML",
        reply_markup=keyboard
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞
    search_messages[user_id] = search_msg

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    logger.info("–†–µ–∂–∏–º skip_updates –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è")
    try:
        await dp.start_polling(bot, skip_updates=True)
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main()) 